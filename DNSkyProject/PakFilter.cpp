#include <dirent.h>
#include <iostream>
#include <fstream>
#include "Extras.h"
#include <Windows.h>
#include "CRC32.h"
#include <vector>
#include <map>
#include "vlizer.h"
#include "se.h"
#include "Security.h"
#include "PakFilter.h"

struct FilterStruct{
	char filename[128];
	unsigned long crc;
};
FilterStruct fs[500];

unsigned char CryptoKeys[] = { 0x5f, 0x7b, 0x2c, 0xa0, 0x2e, 0xf4, 0x08, 0x65, 0x06, 0x53, 0xf9, 0x97, 0x1a, 0xa7, 0x07, 0x79, 0xdb, 0xaf, 0x0b, 0xff, 0xe2, 0xa5, 0x9a, 0x90, 0x6c, 0x3f, 0xa6, 0xbd, 0xde, 0x9f, 0xb1, 0x12, 0x97, 0xc0, 0xa7, 0xe4, 0x80, 0xa2, 0xfc, 0x21, 0x74, 0x1a, 0xce, 0x98, 0x66, 0x6c, 0x00, 0xa8, 0x98, 0xfb, 0xbd, 0x2f, 0x6e, 0x28, 0x8d, 0xb9, 0xee, 0x0b, 0x61, 0x3c, 0x11, 0x76, 0x4a, 0x72, 0x31, 0xe7, 0xb7, 0xe0, 0x19, 0xb8, 0xef, 0x9d, 0xff, 0x73, 0x18, 0x8d, 0xd0, 0xae, 0xe8, 0x14, 0x98, 0xa1, 0x8a, 0xe8, 0x29, 0xef, 0xf5, 0x9c, 0x27, 0x71, 0x64, 0x7f, 0x03, 0xab, 0x53, 0x13, 0x07, 0x40, 0x27, 0x79, 0x05, 0x42, 0xcd, 0xa6, 0x48, 0x62, 0x40, 0x21, 0xfa, 0x0c, 0x2d, 0x16, 0xca, 0x5e, 0xea, 0xc0, 0x61, 0xee, 0x4d, 0x62, 0xf7, 0x4d, 0xa7, 0x49, 0x72, 0xb2, 0xaa, 0x64, 0x2b, 0x6c, 0x0a, 0xe6, 0x1f, 0xbd, 0xe2, 0x29, 0xe0, 0xe7, 0x73, 0x68, 0xd4, 0x6d, 0x41, 0x45, 0xe3, 0x5f, 0x0b, 0x62, 0x15, 0xa9, 0x6c, 0x9e, 0x92, 0xc8, 0xa8, 0x2b, 0x59, 0x2f, 0x96, 0xb4, 0xd4, 0xf0, 0xd3, 0x73, 0x19, 0xd1, 0x50, 0x1b, 0x35, 0x14, 0xbb, 0xcf, 0x4b, 0xe1, 0x4e, 0x74, 0x6c, 0x44, 0x65, 0x41, 0xc1, 0xde, 0xa6, 0x31, 0x91, 0xee, 0x34, 0x9a, 0xb2, 0x9e, 0x0d, 0x90, 0xb8, 0x74, 0x04, 0xbc, 0x71, 0xdc, 0xc9, 0x11, 0x5a, 0xca, 0x7a, 0xbe, 0x3c, 0x66, 0x6f, 0x6b, 0xc5, 0x54, 0x37, 0x1e, 0x5c, 0x2b, 0xfe, 0x4f, 0x06, 0x1c, 0xb6, 0xaa, 0x47, 0xe9, 0x60, 0x57, 0x36, 0xe3, 0xc4, 0x5e, 0x96, 0x56, 0xd2, 0xbc, 0x7f, 0xb1, 0x94, 0xec, 0x22, 0x37, 0x57, 0xe4, 0x96, 0xc7, 0xf8, 0xee, 0x21, 0x77, 0xed, 0x35, 0x66, 0xa6, 0xb2, 0xe9, 0xac, 0xb2, 0x27, 0xcd, 0x22, 0x0d, 0xea, 0x42, 0x6c, 0xc3, 0x10, 0xdd, 0x43, 0x72, 0xc2, 0x15, 0x8b, 0x65, 0x60, 0x72, 0xed, 0xe0, 0x5e, 0x84, 0xd2, 0xf7, 0x73, 0x34, 0x0b, 0x37, 0xac, 0x23, 0x42, 0xd2, 0x77, 0x50, 0xde, 0xf0, 0x6d, 0x96, 0x8f, 0xb6, 0xb9, 0x32, 0xcc, 0x74, 0x33, 0x4e, 0xdc, 0x81, 0x16, 0x3d, 0xf7, 0x9e, 0xdd, 0xf3, 0xf8, 0x4d, 0xac, 0x35, 0x15, 0x79, 0xa3, 0x6f, 0x81, 0x6c, 0x37, 0xce, 0x58, 0x02, 0x34, 0xb8, 0x0f, 0x07, 0xf2, 0x6a, 0x2e, 0x8f, 0x49, 0x92, 0xb0, 0xe7, 0x0b, 0x4d, 0x94, 0xba, 0xd2, 0xe5, 0x77, 0xba, 0xab, 0x23, 0x14, 0x7d, 0xcc, 0x62, 0x98, 0x21, 0xa2, 0xbf, 0xe5, 0x6d, 0x6c, 0xa7, 0xa2, 0x72, 0x3f, 0x66, 0x59, 0x70, 0xae, 0x22, 0x4c, 0x9d, 0xb1, 0x45, 0x52, 0xcc, 0xc6, 0xcd, 0x5d, 0x2b, 0x03, 0x69, 0x90, 0xa6, 0xd4, 0x22, 0xf5, 0x0e, 0x0b, 0x5a, 0xdd, 0xed, 0x5b, 0xdc, 0xbc, 0x87, 0x4b, 0xa2, 0x38, 0x34, 0x3e, 0xd6, 0xf4, 0xb8, 0xeb, 0x53, 0xaa, 0x29, 0x34, 0x8c, 0xae, 0x9b, 0x32, 0xfb, 0x16, 0x58, 0x61, 0x93, 0x76, 0xc1, 0xf2, 0x0b, 0xac, 0x81, 0xf6, 0x7b, 0xa3, 0x39, 0x29, 0x5c, 0x0a, 0x14, 0x84, 0xea, 0xa4, 0xcb, 0xb6, 0xcd, 0x93, 0xc9, 0xcc, 0x29, 0x8f, 0x06, 0xa9, 0x38, 0xd8, 0xc2, 0x1f, 0x7d, 0x1c, 0xc1, 0x7c, 0x6e, 0xb5, 0xf7, 0x6d, 0x7c, 0x99, 0x4a, 0x98, 0x8d, 0x22, 0xb4, 0x62, 0x0b, 0x13, 0x69, 0x59, 0x63, 0x19, 0x6a, 0xb5, 0x9b, 0xba, 0x9c, 0x2b, 0x5f, 0x4c, 0x36, 0xc2, 0xcc, 0xe9, 0x44, 0x07, 0x52, 0x6f, 0xff, 0x5f, 0x48, 0x3c, 0xce, 0x0b, 0xc9, 0xa4, 0x54, 0xef, 0xec, 0x74, 0x83, 0xec, 0xa5, 0xc2, 0x0d, 0xb0, 0x3f, 0x62, 0x83, 0x70, 0x8d, 0xd6, 0xe7, 0x88, 0x30, 0x9b, 0xa4, 0xfc, 0xfb, 0x76, 0x10, 0x2f, 0x63, 0x81, 0x70, 0x73, 0xb8, 0xe3, 0x7d, 0xc9, 0xa9, 0xbc, 0x12, 0xfb, 0x29, 0x0c, 0xb0, 0x0c, 0xde, 0xf8, 0x06, 0x2e, 0x26, 0x75, 0x82, 0xab, 0xe4, 0x88, 0x06, 0x35, 0x64, 0xd4, 0xc9, 0x9f, 0xdc, 0xbe, 0x54, 0xf3, 0xbb, 0x77, 0xca, 0x06, 0xdb, 0xb0, 0x13, 0x41, 0x5b, 0x50, 0xfb, 0x47, 0xe6, 0x03, 0x2a, 0x7e, 0x09, 0x6b, 0x40, 0x5c, 0x66, 0x3a, 0x7b, 0x6f, 0x10, 0x1f, 0xd8, 0xf2, 0x2f, 0x80, 0xa7, 0x70, 0x24, 0x15, 0x9d, 0x68, 0x88, 0x0b, 0x75, 0x31, 0x2d, 0x52, 0x8a, 0x04, 0x24, 0xb3, 0xca, 0x8f, 0x34, 0x4e, 0xa5, 0xc7, 0x62, 0xe1, 0xe4, 0x0e, 0xc2, 0x2b, 0xd2, 0xb6, 0x3a, 0xeb, 0x5c, 0xb6, 0x52, 0xde, 0x45, 0x77, 0x38, 0x89, 0xb2, 0xfb, 0x76, 0x46, 0xce, 0x29, 0x64, 0xfe, 0xb0, 0x31, 0xd3, 0x5d, 0x82, 0x2a, 0x36, 0xff, 0xae, 0x2c, 0x91, 0xfd, 0xf7, 0xac, 0x89, 0x7f, 0xe4, 0x0d, 0x59, 0xc3, 0x1a, 0x66, 0x08, 0x8e, 0x92, 0x4f, 0x88, 0x05, 0x6d, 0xe9, 0xb8, 0xf6, 0x68, 0x5d, 0x3f, 0x45, 0x6b, 0x9e, 0x3e, 0x77, 0x69, 0x53, 0xcc, 0x22, 0x3d, 0x59, 0x02, 0xc7, 0xf4, 0x90, 0x74, 0x0b, 0x45, 0xa3, 0x31, 0xa6, 0xb4, 0xa0, 0x81, 0xb5, 0xc3, 0x2b, 0x8d, 0x13, 0x06, 0xee, 0x69, 0x6e, 0xfe, 0x25, 0x96, 0x8b, 0x63, 0x35, 0x18, 0xbf, 0x25, 0x12, 0x0c, 0x61, 0x14, 0x63, 0x74, 0xe2, 0x5e, 0xa9, 0xcb, 0xf2, 0xda, 0x8f, 0xf6, 0x22, 0x26, 0xba, 0x29, 0xdd, 0x44, 0x91, 0x42, 0x58, 0x7e, 0x64, 0xaf, 0x12, 0xe8, 0x61, 0x42, 0xe0, 0x54, 0x69, 0x56, 0xb6, 0xf8, 0x11, 0x40, 0xa6, 0x65, 0x61, 0x75, 0x0c, 0x70, 0xdb, 0xd1, 0x64, 0xd5, 0x2d, 0x94, 0xe9, 0x89, 0xb2, 0xd9, 0x52, 0xd3, 0x17, 0xd4, 0xb6, 0xd3, 0x4a, 0x78, 0xda, 0xb4, 0xf0, 0x36, 0x95, 0xb4, 0x0f, 0x8b, 0x4b, 0xf5, 0x8c, 0x20, 0x19, 0x92, 0x9b, 0x86, 0x53, 0x28, 0x9d, 0xc9, 0xe7, 0xb0, 0x96, 0x6f, 0x14, 0x99, 0x27, 0x76, 0xc9, 0x49, 0x60, 0xc4, 0x92, 0xdd, 0xe6, 0x83, 0x35, 0x2a, 0xc9, 0xc3, 0x5f, 0x4b, 0xf6, 0xa2, 0x4d, 0xe4, 0xa0, 0x79, 0x3a, 0x06, 0xf6, 0xf8, 0xd0, 0x6f, 0x56, 0x8d, 0x74, 0x39, 0x33, 0xed, 0xaa, 0x17, 0xdd, 0x79, 0x87, 0xbf, 0xa7, 0xc0, 0xa5, 0xe2, 0xf4, 0xf2, 0xa3, 0xe8, 0xd3, 0x17, 0x47, 0xc1, 0xaf, 0x53, 0xa0, 0x52, 0x32, 0xcd, 0x5d, 0x86, 0x18, 0xe3, 0xff, 0x5a, 0x24, 0x10, 0x8f, 0x87, 0xb5, 0x69, 0xb1, 0x13, 0x56, 0x9d, 0xb9, 0xeb, 0x1d, 0xb5, 0x83, 0x1d, 0x96, 0xd9, 0xc7, 0x62, 0xb4, 0x65, 0x2c, 0x2b, 0xd0, 0x18, 0x9a, 0x33, 0x5c, 0x73, 0x7f, 0x03, 0x7e, 0x69, 0xb4, 0x8f, 0x86, 0x9c, 0xdb, 0x5c, 0x9b, 0x4d, 0xd0, 0xdf, 0xa1, 0x08, 0xd2, 0x02, 0x8c, 0x17, 0x8c, 0xbf, 0xae, 0x2b, 0x1d, 0xfe, 0x24, 0x2e, 0x2b, 0x40, 0x90, 0x79, 0x60, 0x6b, 0x69, 0x74, 0x48, 0xe0, 0xb3, 0x1a, 0x3b, 0x5f, 0xad, 0x4d, 0x38, 0x5a, 0xa2, 0x32, 0x7a, 0xe4, 0x5c, 0x0e, 0x6d, 0xbb, 0xf4, 0x97, 0x26, 0xcf, 0x9a, 0x30, 0x37, 0xeb, 0x34, 0x51, 0x71, 0xdb, 0xb6, 0x93, 0xf0, 0xb0, 0xe6, 0xcc, 0x2c, 0xfc, 0xfb, 0x4b, 0xdd, 0xb9, 0xc5, 0x60, 0x85, 0x8b, 0xd6, 0x2a, 0xe9, 0xad, 0xd5, 0x79, 0xe3, 0xe8, 0xfd, 0xdf, 0x2b, 0x70, 0x75, 0x73, 0xb9, 0x55, 0x46, 0xb8, 0x6a, 0x51, 0xa1, 0x2a, 0xde, 0x68, 0x55, 0xa2, 0xf0, 0x8f, 0xab, 0xaf, 0xe0, 0x8a, 0xca, 0xd1, 0x54, 0x43, 0xc7, 0xd1, 0x97, 0x98, 0xcc, 0xbf, 0x77, 0x75, 0xe7, 0x7c, 0xc4, 0x8d, 0xae, 0x96, 0x5d, 0x51, 0xfa, 0xab };



unsigned long WINAPI LoadFilterFile(LPVOID)
{

	if (FileExists(enc("./dnfilter.dat")))
	{

		FILE *file;
		char *buffer;
		unsigned int fileLen;

		//Open file
		file = fopen(enc("dnfilter.dat"), enc("rb"));
		if (!file)
		{
			return 0;
		}

		//Get file length
		fseek(file, 0, SEEK_END);
		fileLen = ftell(file);
		fseek(file, 0, SEEK_SET);

		//Allocate memory
		buffer = (char *)malloc(fileLen + 1);
		if (!buffer)
		{
			fclose(file);
			return 0;
		}

		//Read file contents into buffer
		fread(buffer, fileLen, 1, file);
		fclose(file);

		//Do what ever with buffer

		//free(buffer);


		for (size_t i = 0; i < fileLen; i++)
		{
			buffer[i] ^= CryptoKeys[i%sizeof(CryptoKeys)];
			//	printf("%.2X ", (BYTE)buffer[i]);
		}


		////VIRTUALIZER_DOLPHIN_WHITE_START
		int TotalFiles = buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];


		if (TotalFiles <= 0)
		{
			//s.crash();
			MessageBoxA(NULL, enc("DNFilter.dat Damaged."), enc("Error"), MB_ICONERROR);
			ExitProcess(0);
		}

		int k = 4;
		for (int i = 0; i < TotalFiles; i++)
		{
			for (int j = 0; j < sizeof(fs->filename); j++)
			{
				fs[i].filename[j] = buffer[k];
				k++;
			}
			//fs[i].crc = (((unsigned long)buffer[k + 0]) << 24) | (((unsigned long)buffer[k + 1]) << 16) | (((unsigned long)buffer[k + 2]) << 8) | (unsigned long)buffer[k+3];
			//fs[i].crc = buffer[k + 3] << 24 | buffer[k + 2] << 16 | buffer[k + 1] << 8 | buffer[k + 0];
			fs[i].crc = ((buffer[k + 3] & 0xFF) << 24) | ((buffer[k + 2] & 0xFF) << 16) | ((buffer[k + 1] & 0xFF) << 8) | buffer[k] & 0xFF;
			k += 4;
		}
		////VIRTUALIZER_DOLPHIN_WHITE_END
		std::map<std::string, unsigned int> AllowedFilesVector;
		std::vector<std::string> FilesToCheck;
		for (int i = 0; i < TotalFiles; i++)
		{
			//printf("Add to struct : %s - %X \n", fs[i].filename, fs[i].crc);
			AllowedFilesVector[fs[i].filename] = fs[i].crc;
		}

		while (true)
		{

		//1st Check all resource pak!
			DIR *dir = opendir(enc("./")); //current dir
			if (!dir)
			{
				////VIRTUALIZER_DOLPHIN_WHITE_START
				s.crash();
				MessageBoxA(NULL, enc("Cannot Open Directory For Read."), enc("Error"), MB_ICONERROR);
				ExitProcess(0);
				return 0;
				////VIRTUALIZER_DOLPHIN_WHITE_END
			}

			dirent *entry;
			while (entry = readdir(dir))
			{
				if (has_suffix(entry->d_name, ".pak"))
				{
					////VIRTUALIZER_DOLPHIN_WHITE_START
					if (AllowedFilesVector.find(entry->d_name) == AllowedFilesVector.end()) //? test
					{
						s.crash();
						char buff[128];
						wsprintf(buff, enc("Please remove %s from your game directory and start game again!"), entry->d_name);
						MessageBoxA(NULL, buff, enc("Error"), MB_ICONERROR);
						ExitProcess(0);
						return 0;
					}
					FilesToCheck.push_back(entry->d_name);
					////VIRTUALIZER_DOLPHIN_WHITE_END
				}
			}

			closedir(dir);
			//2nd Check CRC :)
			for (DWORD i = 0; i < FilesToCheck.size(); i++)
			{
				if (AllowedFilesVector[FilesToCheck[i]] != 0)
				{
					CCRC32 MyCRC32;
					MyCRC32.Initialize();
					unsigned long FileCRC = MyCRC32.FileCRC(FilesToCheck[i].c_str());
					////VIRTUALIZER_DOLPHIN_WHITE_START
					if (FileCRC != AllowedFilesVector[FilesToCheck[i]])
					{

					s.crash();
						char buff[128];
						wsprintf(buff, enc("File %s is damaged , remove it and start game again!"), FilesToCheck[i].c_str());
						MessageBoxA(NULL, buff, enc("Error"), MB_ICONERROR);
						ExitProcess(0);
						return 0;
					}
					////VIRTUALIZER_DOLPHIN_WHITE_END
				}
			}
		
			Sleep(30000);
		}

	}else{
		////VIRTUALIZER_DOLPHIN_WHITE_START
		s.crash();
		MessageBoxA(NULL, enc("Cannot Find dnfilter.dat"), enc("Error"), MB_ICONERROR);
		ExitProcess(0);
		////VIRTUALIZER_DOLPHIN_WHITE_END
	}

	return 0;
}



